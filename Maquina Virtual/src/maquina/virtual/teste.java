package maquina.virtual;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;

public class teste extends javax.swing.JFrame {

    Gerenciador INSTANCE = Gerenciador.getInstance();

    public teste() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maquina Virtual");
        setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
        setResizable(false);

        jTable1.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Breakpoint", "Linha", "Função", "Arg1", "Arg2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(30);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(30);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Endereço", "Pilha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
        }

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jButton1.setText("Próximo Passo");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/maquina/virtual/imagens/arquivoImg.png"))); // NOI18N
        jMenu1.setText("Arquivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/maquina/virtual/imagens/importarImg.png"))); // NOI18N
        jMenuItem1.setText("Importar OBJ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/maquina/virtual/imagens/executarImg.png"))); // NOI18N
        jMenu2.setText("Executar");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem2.setText("Executar");
        jMenuItem2.setEnabled(false);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Breakpoint");
        jMenuItem3.setEnabled(false);
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem4.setText("Passo a passo");
        jMenuItem4.setEnabled(false);
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/maquina/virtual/imagens/ajudaImg.png"))); // NOI18N
        jMenu3.setText("Sobre");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //funcao para carregar o arquivo
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        JFileChooser abrir_arquivo = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos Obj", "obj");    //seta apenas extensoes .obj
        abrir_arquivo.setFileFilter(filter);
        File arquivo_obj;
        abrir_arquivo.setFileSelectionMode(JFileChooser.OPEN_DIALOG);
        int valor = abrir_arquivo.showOpenDialog(null);

        if (valor == JFileChooser.APPROVE_OPTION) {
            arquivo_obj = abrir_arquivo.getSelectedFile(); //pego o arquivo escolhido

            if (INSTANCE.LerArquivo(arquivo_obj)
                    == false) {
                JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo");
            }
            int TAM1 = (INSTANCE.TamanhoMemoria());    //quantidade de alunos
            int TAM2 = 5;

            codigo = new Object[TAM1][TAM2];
            titulos = new String[TAM2];

            titulos[0] = "LINHA";
            titulos[1] = "BREAKPOINT";
            titulos[2] = "COMANDO";
            titulos[3] = "ARG1";
            titulos[4] = "ARG2";
            Memoria recebe_memoria = INSTANCE.getMemoria();
            for (int i = 0; i < recebe_memoria.getTotalLinhas(); i++) { //loop percorrendo todas as linhas lidas do codigo, e instanciando na tabela
                Funcoes funcao_atual = recebe_memoria.getFuncByIndex(i);
                codigo[i][0] = i + 1;
                codigo[i][1] = null;
                codigo[i][2] = funcao_atual.getFuncao();
                codigo[i][3] = funcao_atual.getArg1();
                codigo[i][4] = funcao_atual.getArg2();
            }
            jTable1.setModel(new javax.swing.table.DefaultTableModel( //codigo ja criado pelo BUILDER com a implementação pra add a tabela que acabmos de criar
                    codigo,
                    titulos
            ) {
                boolean[] canEdit = new boolean[]{
                    false, true, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

            int linha_atual = INSTANCE.getMemoria().getI();

            jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    c.setBackground(row == linha_atual ? Color.RED : Color.WHITE);
                    return c;
                }
            });

            jTable1.setColumnSelectionAllowed(true);
            jScrollPane1.setViewportView(jTable1);

            jTable1.getColumnModel()
                    .getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            if (jTable1.getColumnModel()
                    .getColumnCount() > 0) {
                jTable1.getColumnModel().getColumn(0).setResizable(false);
                jTable1.getColumnModel().getColumn(1).setResizable(false);
                jTable1.getColumnModel().getColumn(2).setResizable(false);
                jTable1.getColumnModel().getColumn(3).setResizable(false);
                jTable1.getColumnModel().getColumn(4).setResizable(false);
            }

            jScrollPane1.setViewportView(jTable1);
        }
        jMenuItem2.setEnabled(true);
        jMenuItem3.setEnabled(true);
        jMenuItem4.setEnabled(true);    //ate aqui é o codigo do builder re-escrito
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //ação do botao executar, que executa o codigo todo
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        boolean finished = false;   //para saber se acabou o codigo ou nao        
        do {
            jTable1.updateUI();
            jTable2.updateUI();
            jTextArea1.updateUI();
            finished = INSTANCE.ExecutaLinha(); //executo a linha
            Pilha pilha_aux = INSTANCE.getPilha();  //pego toda a pilha
            Object[][] dados_pilha = new Object[pilha_aux.getDadosSize()][2];   //instancio um object do tamanho da pilha (numero de linhas)

            for (int i = 0; i < pilha_aux.getDadosSize(); i++) {    //preencho esse obj
                dados_pilha[i][0] = i;
                dados_pilha[i][1] = pilha_aux.getIndexPilha(i);
            }
            jTable2.setModel(new javax.swing.table.DefaultTableModel( //re-instancio a tabela de pilha, com os dados atualizados
                    dados_pilha,
                    new String[]{
                        "Endereço", "Pilha"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
            jScrollPane2.setViewportView(jTable2);
            if (jTable2.getColumnModel().getColumnCount() > 0) {
                jTable2.getColumnModel().getColumn(0).setResizable(false);
            }
            //ate ai em cima, é codigo do builder, re-utilizado            
        } while (!finished);    //faço o loop enquanto aquela primeira variavel booleana nao for alterada
        //eu achei melhor fazer por while, pq pode ser que no codigo eu tenha um "loop infinito", entao aqui ficaria em loop infinito
        
        String output = "";
        for (String e:INSTANCE.getPrints()) {
            output = output + e;
        }
        jTextArea1 = new javax.swing.JTextArea(output);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jScrollPane4.setViewportView(jTextArea1);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

//opção de passo-a-passo, na hr que eu clico, ele executa o codigo uma vez
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        jButton1.setEnabled(true);  //habilito o botao pra poder dar o proximo passo
        boolean finished = INSTANCE.ExecutaLinha(); //executo uma linha
        //mesma coisa do codigo acima, mas tirando o loop, pq é uma linha por vez
        Pilha pilha_aux = INSTANCE.getPilha();
        Object[][] dados_pilha = new Object[pilha_aux.getDadosSize()][2];

        for (int i = 0; i < pilha_aux.getDadosSize(); i++) {
            dados_pilha[i][0] = i;
            dados_pilha[i][1] = pilha_aux.getIndexPilha(i);
        }
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                dados_pilha,
                new String[]{
                    "Endereço", "Pilha"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        String output_text = "";
        java.util.ArrayList<String> prints = INSTANCE.getPrints();
        for (int i = 0; i < prints.size(); i++) {
            output_text.concat(prints.get(i) + "\n");
        }

        jTextArea1 = new javax.swing.JTextArea(output_text);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jScrollPane4.setViewportView(jTextArea1);
        jScrollPane2.setViewportView(jTable2);

        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
        }
        if (finished) {
            jButton1.setEnabled(false);
        }
        int linha_atual = INSTANCE.getMemoria().getI();

        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setBackground(row == linha_atual ? Color.RED : Color.WHITE);
                return c;
            }
        });
        jTable1.updateUI();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    //botao de execução passo-a-passo
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //mesmo codigo da func acima
        jButton1.setEnabled(false);
        boolean finished = INSTANCE.ExecutaLinha();
        Pilha pilha_aux = INSTANCE.getPilha();
        Object[][] dados_pilha = new Object[pilha_aux.getDadosSize()][2];

        for (int i = 0; i < pilha_aux.getDadosSize(); i++) {
            dados_pilha[i][0] = i;
            dados_pilha[i][1] = pilha_aux.getIndexPilha(i);
        }
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                dados_pilha,
                new String[]{
                    "Endereço", "Pilha"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
        }
        String output_text = "";
        java.util.ArrayList<String> prints = INSTANCE.getPrints();
        for (int i = 0; i < prints.size(); i++) {
            output_text = output_text.concat(prints.get(i) + "\n");
        }
        System.out.println("OUTPUT TEXT:" + output_text);
        jTextArea1 = new javax.swing.JTextArea(output_text);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jScrollPane4.setViewportView(jTextArea1);
        jButton1.setEnabled(true);
        if (finished) {
            jButton1.setEnabled(false);
        }
        int linha_atual = INSTANCE.getMemoria().getI();

        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setBackground(row == linha_atual ? Color.RED : Color.WHITE);
                return c;
            }
        });
        jTable1.updateUI();
        System.out.println("executou linha " + linha_atual);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(teste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(teste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(teste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(teste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new teste().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private Object[][] codigo;  //crio as variaveis que vao na tabela
    private String[] titulos;

}
